<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>server on 暴躁老农</title>
    <link>https://zecoo.github.io/hugo/categories/server/</link>
    <description>Recent content in server on 暴躁老农</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 05 Jun 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://zecoo.github.io/hugo/categories/server/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Demo: flask&#43;vue&#43;mysql</title>
      <link>https://zecoo.github.io/hugo/posts/server/demo-flask&#43;vue&#43;mysql/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://zecoo.github.io/hugo/posts/server/demo-flask&#43;vue&#43;mysql/</guid>
      <description>从本科软工教学谈起 这样一套前后端都打通的demo，才算是真的接触到软件工程的皮毛吧？
今天在想本科的教学，根本不管学生的水平差距，只让学生分几个组，做一个高大上的东西出来。于是就出现了疯狂抱大腿的现象，并不是说这样不好。我们可以说那些混子你怎么自己不努力呀，只想着抱大腿？我经历过所以我知道那个时候的自己还没有成熟，不知道什么是对自己好的，什么是不好的。抱大腿做一个fancy的项目出来意味着高分数，意味着高GPA，意味着可能拿奖学金、保研。
但是选择了抱大腿，就可能去做一些边缘的东西，比如美工、比如前端、比如产品。对于一个基本的产品全貌是没有办法掌握的。
而且本科学Java、学数据库、学计算机网络等等，我不知道自己为什么学，只知道专业里有这么几门课程，而且要拿高分。就成了为了学而学，不管我为什么要学。我觉得如果让我大一的时候就接触前后端加数据库的最小demo，哪怕是一个hello world，我也会对整个框架有一定的概念，带着兴趣和疑问去听课。
怪自己，也怪老师们不了解学生水平。浪费了本科的大好时光，也就渐渐离程序员这个职业选择越来越远。
Hello World 回顾基础  Vue把后台的数据渲染到html里，就能实现动态网页 Flask处理数据，就是一些乱七八糟的后台逻辑 Mysql把数据存储起来，不然老是放内存里丢了怎么办。  环境配置 安装Vue环境 按照参考文章安装即可。
在心动实习的时候接触过Vue，当时用Electron做app，感觉运行过程特别缓慢。因为npm install要安装一大堆的module，整个项目就变得巨大。
安装Flask Flask如果想直接flask run运行的话，文件的命名方式必须为app.py，不然会提示先设置FLASK_PATH。
axios Vue里的模块，这个小东西类似Ajax，用于获取后台数据。
CORS Flask里的模块，如果没有它就不会把数据暴露出去。反正我没有暴露接口的话会报500错误。详细的等想起来了或者需要了再去研究。
运行流程 先用flask把接口暴露出来
@app.route(&#39;/getMsg&#39;) def get_msg(): response = { &#39;msg&#39;: &#39;hello python&#39; } return jsonify(response)  然后axios获取数据
const path = &#39;http://127.0.0.1:5000/getMsg&#39;; axios.get(path).then(function(response){ var msg = response.data.msg; console.log(msg); that.serverResponse = msg; })  连接mysql是python的事情，Flask拿数据就好了。
from pymysql import connect def conn_mysql(): conn = connect(host=&#39;localhost&#39;, port=3306, user=&#39;root&#39;, password=&#39;pwd&#39;, database=&#39;test&#39;) cur = conn.</description>
    </item>
    
    <item>
      <title>python应用环境搭建</title>
      <link>https://zecoo.github.io/hugo/posts/server/python%E5%BA%94%E7%94%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://zecoo.github.io/hugo/posts/server/python%E5%BA%94%E7%94%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>安装python3 首先下载python3安装包，在csdn上下载可能更快一点。
如果是在服务器上安python3，那可能需要修改镜像源。
app依赖 由于代码里需要import很多依赖，如果直接跑python app.py就会报各种依赖不存在的错误，所以需要先安装所有的依赖：pip install -r requirements.txt
参考 https://www.cnblogs.com/Simple-Small/p/12221135.html （安装python3）
https://github.com/shiniao/mini_sms_classify （python应用需要import的依赖）
https://blog.csdn.net/timtian008/article/details/81186356 （国内python下载太慢了）</description>
    </item>
    
    <item>
      <title>服务器命令行美化</title>
      <link>https://zecoo.github.io/hugo/posts/server/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BE%8E%E5%8C%96/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://zecoo.github.io/hugo/posts/server/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BE%8E%E5%8C%96/</guid>
      <description>export PS1=&amp;quot;\[\033[33m\]\u\[\033[0m\]@\[\033[36m\]k8s\[\033[0m\]:\[\033[32m\]\W \[\033[0m\]$ &amp;quot;  但是有个问题，输了命令命令行前缀是变好看了，但是一旦退出就没有效果了。要把这个设置写进文件里才行。具体是$HOME/.bashrc这个文件，这样就OK啦。
# .bashrc # User specific aliases and functions alias rm=&#39;rm -i&#39; alias cp=&#39;cp -i&#39; alias mv=&#39;mv -i&#39; # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi export PS1=&amp;quot;\[\033[33m\]\u\[\033[0m\]@\[\033[36m\]k8s\[\033[0m\]:\[\033[32m\]\W \[\033[0m\]$ &amp;quot;  vim也可以美化一下
# vim 显示行号 cat &amp;lt;&amp;lt;EOF &amp;gt; ~/.vimrc set nu EOF  参考 https://learnku.com/articles/29209 （ssh炫酷UI）
https://blog.csdn.net/yelangjueqi/article/details/45556657 （修改.bashrc文件）</description>
    </item>
    
    <item>
      <title>jq in terminal for json</title>
      <link>https://zecoo.github.io/hugo/posts/server/jq-in-terminal-for-json/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://zecoo.github.io/hugo/posts/server/jq-in-terminal-for-json/</guid>
      <description>Prom返回的json格式没有reindent，看起来很费眼睛。
{&amp;quot;metric&amp;quot;:{&amp;quot;__name__&amp;quot;:&amp;quot;istio_requests_total&amp;quot;,&amp;quot;destination_app&amp;quot;:&amp;quot;productpage&amp;quot;,&amp;quot;destination_service&amp;quot;:&amp;quot;productpage&amp;quot;,&amp;quot;value&amp;quot;:[1588929523.247,&amp;quot;10523&amp;quot;]}]}}  在命令行，想让其用缩进好的json展示出来，就要用到jq。
curl http://test.json | jq  只需要在后面加上jq，就可以看到漂亮的json格式数据
&amp;quot;metric&amp;quot;: { &amp;quot;__name__&amp;quot;: &amp;quot;istio_requests_total&amp;quot;, &amp;quot;connection_security_policy&amp;quot;: &amp;quot;unknown&amp;quot;, &amp;quot;destination_app&amp;quot;: &amp;quot;productpage&amp;quot;, &amp;quot;destination_canonical_revision&amp;quot;: &amp;quot;v1&amp;quot;, &amp;quot;destination_canonical_service&amp;quot;: &amp;quot;productpage&amp;quot;, &amp;quot;destination_principal&amp;quot;: &amp;quot;spiffe://cluster.local/ns/default/sa/bookinfo-productpage&amp;quot;, &amp;quot;destination_service&amp;quot;: &amp;quot;productpage.default.svc.cluster.local&amp;quot;, &amp;quot;destination_service_name&amp;quot;: &amp;quot;productpage&amp;quot;, &amp;quot;destination_service_namespace&amp;quot;: &amp;quot;default&amp;quot;, &amp;quot;destination_version&amp;quot;: &amp;quot;v1&amp;quot;, &amp;quot;destination_workload&amp;quot;: &amp;quot;productpage-v1&amp;quot;, &amp;quot;destination_workload_namespace&amp;quot;: &amp;quot;default&amp;quot;, &amp;quot;instance&amp;quot;: &amp;quot;10.244.0.61:15090&amp;quot;, &amp;quot;job&amp;quot;: &amp;quot;envoy-stats&amp;quot;, &amp;quot;namespace&amp;quot;: &amp;quot;istio-system&amp;quot;, &amp;quot;pod_name&amp;quot;: &amp;quot;istio-ingressgateway-6489d9556d-ws6cg&amp;quot;, &amp;quot;reporter&amp;quot;: &amp;quot;source&amp;quot;, &amp;quot;request_protocol&amp;quot;: &amp;quot;http&amp;quot;, &amp;quot;response_code&amp;quot;: &amp;quot;200&amp;quot;, &amp;quot;response_flags&amp;quot;: &amp;quot;-&amp;quot;, &amp;quot;source_app&amp;quot;: &amp;quot;istio-ingressgateway&amp;quot;, &amp;quot;source_canonical_revision&amp;quot;: &amp;quot;1.5&amp;quot;, &amp;quot;source_canonical_service&amp;quot;: &amp;quot;istio-ingressgateway&amp;quot;, &amp;quot;source_principal&amp;quot;: &amp;quot;spiffe://cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account&amp;quot;, &amp;quot;source_version&amp;quot;: &amp;quot;unknown&amp;quot;, &amp;quot;source_workload&amp;quot;: &amp;quot;istio-ingressgateway&amp;quot;, &amp;quot;source_workload_namespace&amp;quot;: &amp;quot;istio-system&amp;quot; }, &amp;quot;value&amp;quot;: [ 1588918429.</description>
    </item>
    
    <item>
      <title>SS on Ubuntu</title>
      <link>https://zecoo.github.io/hugo/posts/k8s/ss-on-ubuntu/</link>
      <pubDate>Thu, 09 Apr 2020 11:37:07 +0800</pubDate>
      
      <guid>https://zecoo.github.io/hugo/posts/k8s/ss-on-ubuntu/</guid>
      <description>弄起来挺快的，其实就三点
 安装ss。apt install就可以 配置ss。就一个json文件 启动ss。一行命令  参考： https://viencoding.com/article/90</description>
    </item>
    
    <item>
      <title>初试Nginx部署静态网页</title>
      <link>https://zecoo.github.io/hugo/posts/static-web/%E5%88%9D%E8%AF%95nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/</link>
      <pubDate>Thu, 09 Apr 2020 11:37:07 +0800</pubDate>
      
      <guid>https://zecoo.github.io/hugo/posts/static-web/%E5%88%9D%E8%AF%95nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/</guid>
      <description>在ife上也写了几个网页了，但是如果一直用github-pages的话，感觉有点麻烦，自己有一个服务器干嘛不直接用呢？
安装Nginx及其简单：
apt install nginx
这个时候如果发现终端不动了，没啥反应，其实是Nginx已经启动了，浏览器输入地址看看是不是能看到nginx欢迎页。
下一步给nginx设置自己的主页
按照参考博客给出的思路，先建立一个文件夹作为nginx访问目录。比如/www/static-web
然后给自己的目的设置一个nginx配置文件，配置文件地址
cd /etc/nginx/conf.d/
然后新建一个static-hello.conf
写进以下内容：
server { server_name = 89.33.194.100; // 你自己的地址或者域名 root /root/www/static-web; // nginx访问目录 index index.html; location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){ root /root/www/static-web/; } }  然后重启nginx
nginx -s reload
我在浏览器访问了一下自己的地址，发现403 Forbidden。故排查之。
查看nginx错误信息
cat /var/log/nginx/error.log
得到这样的信息
2020/04/08 23:43:58 [notice] 1390#1390: signal process started 2020/04/08 23:44:10 [error] 1391#1391: *4 &amp;quot;/root/www/static-web/index.html&amp;quot; is forbidden (13: Permission denied), client: 171.41.91.51, server: =, request: &amp;quot;GET / HTTP/1.</description>
    </item>
    
  </channel>
</rss>