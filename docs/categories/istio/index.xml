<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>istio on 暴躁老农</title>
    <link>https://zecoo.github.io/hugo/categories/istio/</link>
    <description>Recent content in istio on 暴躁老农</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 27 May 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://zecoo.github.io/hugo/categories/istio/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Istio sites</title>
      <link>https://zecoo.github.io/hugo/posts/istio/istio-sites/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://zecoo.github.io/hugo/posts/istio/istio-sites/</guid>
      <description>APP
 productpage sockshop hipser  Istio
 Prometheus Grafana Jaeger Kiali (admin,admin)  </description>
    </item>
    
    <item>
      <title>Meta Metrics</title>
      <link>https://zecoo.github.io/hugo/posts/metrics/meta-metrics/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://zecoo.github.io/hugo/posts/metrics/meta-metrics/</guid>
      <description>siege一分钟压测最后给出的统计数据：
Lifting the server siege... Transactions:	439 hits Availability:	51.83 % Elapsed time:	59.33 secs Data transferred:	8.47 MB Response time:	9.88 secs Transaction rate:	7.40 trans/sec Throughput:	0.14 MB/sec Concurrency:	73.10 Successful transactions: 439 Failed transactions:	408 Longest transaction:	56.69 Shortest transaction:	0.13  istio Envoy的access log：
【START_TIME】[2020-05-06T09:32:24.488Z] 【METHOD】&amp;quot;GET 【PATH】/flasgger_static/swagger-ui-bundle.js 【PROTOCOL】HTTP/1.1&amp;quot; 【REPONSE CODE】200 - &amp;quot;-&amp;quot; &amp;quot;-&amp;quot; 0 1048149 261 225 【FORWARD_FOR】&amp;quot;-&amp;quot; 【AGENT】&amp;quot;Mozilla/5.0 (pc-x86_64-linux-gnu) Siege/4.0.5&amp;quot; 【REQUEST_ID】&amp;quot;51b45953-9ede-9390-b8b5-162247165a5b&amp;quot; 【AUTHORITY】&amp;quot;10.108.208.232:8000&amp;quot; 【HOST】&amp;quot;127.0.0.1:80&amp;quot; 【SERVICE】inbound|8000|http|httpbin.default.svc.cluster.local 【CLUSTER_IP】127.</description>
    </item>
    
    <item>
      <title>istio envoy log type</title>
      <link>https://zecoo.github.io/hugo/posts/istio/istio-envoy-log-type/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://zecoo.github.io/hugo/posts/istio/istio-envoy-log-type/</guid>
      <description>Envoy log type 【START_TIME】[2020-05-06T09:32:24.488Z] 【METHOD】&amp;quot;GET 【PATH】/flasgger_static/swagger-ui-bundle.js 【PROTOCOL】HTTP/1.1&amp;quot; 【REPONSE CODE】200 - &amp;quot;-&amp;quot; &amp;quot;-&amp;quot; 0 1048149 261 225 【FORWARD_FOR】&amp;quot;-&amp;quot; 【AGENT】&amp;quot;Mozilla/5.0 (pc-x86_64-linux-gnu) Siege/4.0.5&amp;quot; 【REQUEST_ID】&amp;quot;51b45953-9ede-9390-b8b5-162247165a5b&amp;quot; 【AUTHORITY】&amp;quot;10.108.208.232:8000&amp;quot; 【HOST】&amp;quot;127.0.0.1:80&amp;quot; inbound|8000|http|httpbin.default.svc.cluster.local 127.0.0.1:43000 10.244.0.67:80 10.244.0.1:10504 - default  获取相应时间数据 特别得，我想知道响应时间，但是好像没有具体列出来。不过每个envoy log都有4个数字特别可疑：
0 135 1 1 (/status/418) 0 9593 73 73 (http/1.1) 0 1428809 1 1 (swagger-ui.bundle.js) 0 85578 1 0 (jquery.min.js) 0 0 118 - (DC ResponseCode:0) 0 1048149 261 225 (swagger-ui.bundle.js)  那么这4串数字分别代表什么呢？根据Envoy官方给出的对应关系，由于HTTP_FLAGS一般都是比较特别的，而我得到的都是&amp;rdquo;-&amp;ldquo;，可以得到对应关系：
[1]BYTES_RECEIVED [2]BYTES_SENT [3]DURATION [4]ENVOY-UPSTREAM-SERVICE-TIME  于是响应时间duration其实就可以拿到了。</description>
    </item>
    
    <item>
      <title>K8s &#43; Istio 概念</title>
      <link>https://zecoo.github.io/hugo/posts/istio/k8s-&#43;-istio-%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Thu, 30 Apr 2020 10:37:07 +0800</pubDate>
      
      <guid>https://zecoo.github.io/hugo/posts/istio/k8s-&#43;-istio-%E6%A6%82%E5%BF%B5/</guid>
      <description>环境都搭好了，不知道里面的原理那可不行。
我也不会系统写，想到哪里就写到哪里吧。
istio是如何做到无侵入就能控制流量转发？ Sidecar还有Envoy是这里的核心。
这个图就很好得说明了sidecar中流量的走向。这部分在华为的书《云原声服务网格istio》中关于sidecar的介绍写得很清楚。也就是说Envoy通过iptables拦截了进来的流量，然后强迫流量走自己的通道，相当于一个收保护费的。
那么iptables为什么这么屌，能把流量给拦截下来？其实iptables改名叫netfilter更形象一些。先不深究iptables是如何做转发的，形象理解iptables为何这么屌，其实是它作为一个内核设置的功能，可以把网卡接受到的流量先通过自己过滤，然后再发送给web应用。
那么也就是，我从Safari发起对http://serverip:port/productpage访问，首先流量通过我的网卡，经过计算机网络传到server的网卡，然后server的网卡把这条流量先交给iptables过滤一下，然后再发给productpage代表的微服务。
iptables我好像把它关了，但是我的istio依然能够工作？这又是为什么呢…
k8s如何调度微服务节点的 搞清楚这样几个概念：pod、deployment、service、node
 一个pod上跑k个容器，这k个容器组成一个app（微服务） deployment，其实叫replica controller更合适。顾名思义，就是扩缩pod service就是app对外的一个访问入口。一个svc中可能有n个replica node就是部署service的节点  那么到这里我有一个小问题，有如果有n个replica，那么流量进来了会被分配到哪个pod里呢？
kubelet是什么 kubelet是node的proxy。
k8s的DNS是什么 给每个svc可用地址。
（以上两个百度结果都不太好，姑且这么理解吧）
参考 http://www.zsythink.net/archives/1199/ （讲iptables的好文）</description>
    </item>
    
    <item>
      <title>Istio 可视化插件概览</title>
      <link>https://zecoo.github.io/hugo/posts/istio/istio-%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8F%92%E4%BB%B6%E6%A6%82%E8%A7%88/</link>
      <pubDate>Thu, 30 Apr 2020 10:35:07 +0800</pubDate>
      
      <guid>https://zecoo.github.io/hugo/posts/istio/istio-%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8F%92%E4%BB%B6%E6%A6%82%E8%A7%88/</guid>
      <description>Prometheus 基本的metrics监测插件。
通过query查询不同的信息，例如以下信息就是istio_requests_total这条query查询到的n条数据中的一条。（不全，删除了部分我不关注的信息）
istio_requests_total{destination_app=&amp;quot;productpage&amp;quot;,destination_principal=&amp;quot;spiffe://cluster.local/ns/default/sa/bookinfo-productpage&amp;quot;,destination_service=&amp;quot;productpage.default.svc.cluster.local&amp;quot;,destination_service_name=&amp;quot;productpage&amp;quot;,destination_service_namespace=&amp;quot;default&amp;quot;,destination_version=&amp;quot;v1&amp;quot;,destination_workload=&amp;quot;productpage-v1&amp;quot;,instance=&amp;quot;10.244.0.24:15090&amp;quot;,job=&amp;quot;envoy-stats&amp;quot;,namespace=&amp;quot;istio-system&amp;quot;,pod_name=&amp;quot;istio-ingressgateway-6489d9556d-bc48z&amp;quot;,response_code=&amp;quot;503&amp;quot;,source_workload=&amp;quot;istio-ingressgateway&amp;quot;,source_workload_namespace=&amp;quot;istio-system&amp;quot;}  Grafana Metrics可视化插件。
Request Volume代表什么？
Request Duration中的P50、P90分别代表什么？
Jaegar 主要显示调用了哪些微服务，调用顺序是什么样的，响应时间是多少。
Kiali 链路追踪可视化插件。可以看出有几个微服务，调用关系是什么样的。
里面也有P50、P90。说明这个很关键啊。
P90=100ms，就是说90%的请求其响应时间在100ms以内，剩余10%的响应时间大于100ms。
Siege 压测工具。来看看压测结果
$ siege -d 10 -c 200 -t 2 http://121.37.159.247:32753/productpage Lifting the server siege... Transactions:	519 hits Availability:	99.24 % Elapsed time:	119.34 secs Data transferred:	20.14 MB Response time:	9.01 secs Transaction rate:	4.35 trans/sec Throughput:	0.17 MB/sec Concurrency:	39.17 Successful transactions: 519 Failed transactions:	4 Longest transaction:	110.01 Shortest transaction:	0.</description>
    </item>
    
    <item>
      <title>Istio 安装回顾</title>
      <link>https://zecoo.github.io/hugo/posts/istio/istio-%E5%AE%89%E8%A3%85%E5%9B%9E%E9%A1%BE/</link>
      <pubDate>Wed, 29 Apr 2020 11:37:07 +0800</pubDate>
      
      <guid>https://zecoo.github.io/hugo/posts/istio/istio-%E5%AE%89%E8%A3%85%E5%9B%9E%E9%A1%BE/</guid>
      <description>如果是Microk8s安装，很简单就一步：
microk8s.enable istio  好像pull istio镜像的过程特别漫长。由于用的是力的2g服务器，到这里内存爆炸，用不了了。
然后转战华为云15天4g服务器试用。
用Kubeadm安装k8s，过程呢，在另一篇博客中。
这里主要回顾Kubeadm安装istio以及各种可视化插件的过程。
全程请把精力集中在istio的官网上。每个教程都很详细。
下载tar包，然后解压得到istio-15.2目录。这个目录里包含需要部署的yaml文件以及bookinfo的实例。
我居然还遇到了docker.io不能pull镜像的问题。又要换一个源……
然后按照istio官方的教程去安装就OK了。
重点呢，是各种可视化插件的部署。如果istio部署顺利的话，各种插件的svc已经启动了，可以get svc查看一下。但是到目前为止还是只能在集群内访问。访问的入口是istio-ingressgateway。然后按照istio官方给出的远程访问方式去部署就好了。这里唯一一个和官方给出的教程不同的地方是，以Prometheus为例，官方给出的访问地址是：
 Prometheus: http://&amp;lt;IP ADDRESS OF CLUSTER INGRESS&amp;gt;:15030/  这里的ingressip要改为
[服务器地址] + [svc istioingressgateway对于15030暴露的端口]
然后就可以用上面的地址访问到Prometheus了。
当然我还搜到了另外一种方式访问，把Prometheus用另一个svc包裹起来，相当于多了一个nodeport svc的中介。输入这个命令即可：
kubectl expose service prometheus --type=NodePort \ --name=prometheus-svc --namespace istio-system  然后就会多出来一个名为prometheus-svc的nodeport形式的服务。调用这个服务暴露出来的地址就可以访问Prometheus，只是我觉得这个方法可能不太安全，就没有用。
参考 https://www.jianshu.com/p/b72c1e06b140 （安装指南）
https://www.cnblogs.com/assion/p/11326088.html （修改istiogateway的LB为nodeport）
https://www.jianshu.com/p/b72c1e06b140 （用hello-node做示例）
https://www.cnblogs.com/davidwang456/articles/9311470.html （SLA和SLO的关系）
https://www.jianshu.com/p/fd90d4914505 （istio的良好实践）
https://www.jianshu.com/p/bed143a1c886 （估计也是个研究生大神，给王老师演示这个就可以了）
https://www.cnblogs.com/CCE-SWR/p/10286404.html （也是演示之用）
https://www.ibm.com/support/knowledgecenter/en/SSBS6K_2.1.0.3/manage_cluster/istio.html （另一种暴露Prometheus的方式）
https://www.jianshu.com/p/9031fdf61115 （docker.io加速）
https://istio.io/zh/docs/tasks/observability/gateways/ (官方暴露prom服务)</description>
    </item>
    
  </channel>
</rss>